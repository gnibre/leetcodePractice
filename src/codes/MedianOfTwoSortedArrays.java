package codes;

public class MedianOfTwoSortedArrays {
    
    
	
	public void go(){

//		int[] A = new int[0];
//		int[] B ={2,3};
		
//		int[] A ={1,7};
//		int[] B ={2,3,4,5,6,8,9,10};
		
//		int[] A = {100000};
//		int[] B ={100001};
		
		int[] A ={1,2,7,8};
		int[] B ={3,4,5,6,9,10};
		
//		int[] A = {76,89,104,287,566,596,660,719,879,1012,1080,1225,1304,1568,1898,1959,1965,2140,2276,2395,2634,2764,2801,2877,3009,3010,3188,3318,3356,3459,3549,3586,3793,3844,3890,4297,4328,4423,4494,4546,4570,4613,4616,4630,4680,4807,5002,5237,5245,5312,5345,5489,5606,5731,5732,5796,5816,6116,6197,6201,6204,6303,6339,6357,6395,6412,6445,6552,6584,6612,6678,6823,6825,6892,7272,7311,7534,7535,7686,7891,8032,8112,8120,8226,8239,8578,8583,8807,9214,9317,9384,9388,9447,9484,9611,9739,9753,9812,9838,9854,9905,9936,9944,9978,10033,10346,10356,10581,10583,10755,10764,10819,10845,11040,11049,11111,11169,11183,11249,11597,11640,11739,11743,11856,11925,11950,11991,12086,12175,12531,12551,12581,12721,12987,13101,13176,13259,13342,13401,13550,13635,13657,13713,13981,14014,14032,14039,14093,14152,14205,14322,14339,14361,14444,14449,14471,14536,14600,14661,14892,15034,15313,15399,15530,15553,15653,15723,15734,15767,15811,16002,16057,16066,16182,16453,16540,16629,16924,16946,17323,17339,17362,17416,17466,17629,17769,17978,17985,18262,18417,18485,18555,18565,18565,18652,18687,18701,18709,18791,19076,19094,19163,19171,19195,19263,19381,19381,19432,19566,19625,19722,19738,19743,19892,19960,20124,20272,20290,20324,20405,20516,20587,20734,20808,20915,20958,20965,21069,21234,21384,21440,21441,21595,21690,21704,21710,21734,21802,21858,21956,21989,22004,22055,22102,22235,22254,22272,22283,22399,22487,22623,22646,22724,22774,22821,22825,23076,23251,23306,23477,23751,23852,24057,24123,24179,24288,24436,24529,24685,24897,25077,25116,25190,25325,25547,25552,25614,25707,25754,25824,25920,25941,25955,25962,26071,26091,26182,26193,26199,26494,26525,26535,26624,26815,26944,27031,27055,27068,27085,27207,27298,27347,27349,27388,27522,27737,27900,28046,28150,28180,28184,28253,28300,28398,28438,28615,28698,28867,28933,28959,29213,29219,29224,29279,29396,29511,29528,29632,29693,29850,29897,29972,29979,30057,30085,30115,30123,30225,30544,30550,30770,30787,30823,31070,31259,31324,31714,31971,32033,32076,32251,32319,32350,32408,32475,32681,32701,32764};
//		int[] B ={122,255,318,346,361,452,520,584,603,657,669,695,708,730,745,757,766,770,773,787,799,818,845,873,875,899,966,985,1103,1114,1164,1238,1243,1261,1284,1339,1351,1424,1431,1457,1468,1482,1493,1514,1584,1601,1630,1644,1683,1739,1744,1751,1793,1867,1870,1909,1912,1941,1970,2017,2137,2155,2194,2214,2236,2257,2472,2514,2548,2654,2734,2791,2798,2823,2886,2887,2919,2941,2958,2998,2999,3026,3054,3061,3174,3192,3225,3282,3358,3389,3392,3406,3427,3429,3470,3501,3555,3590,3604,3676,3718,3724,3744,3765,3796,3803,3808,3846,3883,3914,3916,4049,4092,4102,4118,4128,4159,4170,4170,4287,4296,4309,4349,4363,4374,4571,4594,4606,4621,4637,4731,4746,4775,4800,4816,4832,4837,4867,4880,4935,4942,4976,5007,5077,5106,5122,5179,5199,5237,5255,5265,5341,5370,5378,5394,5398,5467,5493,5518,5548,5630,5651,5762,5842,5867,5914,5915,5935,6013,6081,6092,6132,6178,6217,6245,6289,6409,6410,6445,6464,6478,6481,6660,6711,6711,6767,6778,6782,6788,6844,6855,6945,7036,7107,7119,7210,7229,7256,7292,7292,7355,7395,7446,7455,7472,7477,7481,7529,7558,7560,7590,7661,7669,7749,7802,7862,7886,7922,7993,8007,8009,8051,8055,8064,8071,8211,8305,8410,8443,8457,8463,8496,8629,8633,8649,8744,8745,8834,9021,9059,9081,9098,9125,9126,9136,9210,9222,9235,9318,9353,9367,9384,9475,9495,9519,9543,9596,9597,9679,9691,9705,9708,9842,9890,9905,9907,9914,9923,9932,9937,9939,10006,10015,10098,10154,10156,10183,10202,10209,10226,10229,10245,10290,10307,10361,10412,10438,10446,10450,10461,10534,10545,10651,10727,10860,10940,10970,10996,11056,11088,11091,11111,11160,11162,11216,11241,11292,11292,11465,11475,11538,11576,11696,11704,11825,11858,12014,12070,12083,12153,12163,12171,12202,12211,12225,12239,12251,12316,12549,12580,12583,12593,12702,12718,12731,12769,12813,12961,12973,13016,13027,13031,13033,13035,13082,13097,13125,13140,13143,13190,13219,13281,13283,13326,13349,13364,13394,13418,13439,13448,13451,13462,13528,13540,13616,13694,13729,13790,13800,13808,13891,13920,13943,13979,14216,14354,14371,14378,14388,14487,14530,
//				14543,14543,14642,14712,14782,14786,14828,14829,14832,14897,14911,14914,14973,15012,15054,15080,15107,15123,15130,15149,15151,15159,15236,15262,15319,15328,15340,15372,15445,15458,15461,15568,15576,15651,15658,15670,15736,15819,15868,15871,15991,16044,16198,16229,16251,16322,16335,16364,16397,16403,16408,16417,16456,16492,16495,16562,16565,16605,16620,16644,16652,16809,16861,16908,16942,16955,17044,17061,17102,17225,17240,17335,17337,17361,17462,17469,17540,17649,17686,17728,17754,17781,17830,17874,18019,18023,18130,18133,18181,18254,18255,18281,18370,18380,18391,18398,18419,18488,18491,18520,18638,18663,18763,18857,18865,18894,18944,18956,18987,18997,19044,19067,19071,19135,19165,19277,19287,19302,19333,19347,19389,19497,19570,19587,19592,19640,19803,19872,19880,19923,19927,19946,19993,20004,20007,20088,20223,20247,20298,20376,20378,20417,20433,20439,20471,20472,20505,20527,20640,20652,20705,20726,20762,20788,20811,20814,20851,20862,20879,20909,21014,21146,21236,21273,21290,21361,21436,21466,21492,21673,21796,21831,21834,21898,21973,21991,22019,22020,22046,22046,22151,22193,22213,22244,22296,22329,22440,22444,22454,22462,22471,22518,22537,22554,22578,22647,22762,22895,22897,22946,22988,22989,22997,23035,23076,23109,23136,23325,23343,23383,23387,23437,23450,23533,23541,23562,23596,23779,23796,23820,23932,24010,24125,24142,24242,24373,24547,24560,24587,24598,24650,24737,24767,24774,24832,24868,24876,24892,24911,24947,24982,25004,25041,25115,25223,25226,25245,25384,25398,25483,25567,25607,25636,
//				25690,25713,25728,25732,25738,25784,25811,25884,25930,25955,25959,25982,26035,26076,26093,26107,26124,26157,26192,26212,26231,26264,26302,26361,26367,26380,26422,26453,26486,26544,26580,26770,26785,26804,26851,26880,26972,26977,27025,27041,27096,27098,27182,27202,27235,27284,27349,27372,27396,27454,27511,27529,27537,27598,27719,27736,27832,27860,27864,27884,27917,27934,27948,28039,28041,28042,28043,28050,28074,28100,28106,28123,28162,28195,28367,28422,28453,28505,28541,28566,28595,28596,28605,28615,28640,28641,28652,28657,28667,28696,28740,28759,28779,28803,28832,28845,28852,28854,28864,28932,28950,29042,29047,29085,29147,29218,29230,29244,29288,29332,29363,29376,29440,29458,29465,29467,29492,29493,29534,29558,29560,29601,29612,29663,29740,29793,29817,29887,29906,30106,30206,30231,30276,30297,30331,30364,30378,30425,30431,30565,30588,30603,30613,30646,30663,30694,30712,30726,30772,30774,30846,30896,30955,31055,31075,31110,31134,31146,31228,31259,31269,31271,31302,31334,31392,31446,31511,31516,31518,31562,31721,31779,31813,31849,31865,31866,31906,31906,31934,31941,31954,32015,32083,32150,32205,32232,32267,32268,32294,32351,32373,32396,32400,32405,32452,32479,32480,32487,32491,32491,32561,32590,32605,32641,32716,32757};
		
		
		// count 1000 - 1000
//		int[] A={131,135,195,241,274,288,330,334,342,358,361,391,392,430,470,497,578,627,659,660,756,798,807,819,835,863,869,875,884,912,913,923,928,971,1018,1021,1100,1129,1182,1244,1357,1389,1418,1433,1454,1471,1472,1512,1593,1602,1636,1665,1737,1747,1754,1823,1832,1839,1895,1917,1921,1952,1992,1998,2014,2018,2062,2101,2110,2160,2170,2207,2314,2432,2444,2504,2564,2573,2584,2679,2720,2738,2750,2780,2817,2823,2856,2889,2907,2926,2934,2940,2948,2985,2998,3012,3061,3085,3120,3143,3193,3210,3248,3304,3307,3322,3383,3388,3392,3393,3401,3410,3438,3483,3578,3646,3669,3688,3690,3811,3881,3886,3927,3938,3949,3965,4025,4026,4037,4059,4064,4071,4119,4131,4142,4166,4186,4251,4261,4301,4377,4383,4434,4452,4467,4473,4474,
//				4516,4589,4644,4681,4717,4730,4736,4791,4868,4885,4904,4995,4996,5026,5054,5066,5104,5110,5115,5173,5201,5217,5219,5268,5269,5325,5353,5361,5400,5442,5443,5496,5586,5618,5705,5765,5784,5832,5863,5883,5903,5929,5936,5946,5966,5978,6002,6019,6057,6119,6165,6188,6204,6208,6220,6306,6318,6478,6495,6519,6660,6694,6706,6727,6764,6789,6805,6810,6822,6842,6893,6903,6903,6904,6917,6946,7021,7147,7151,7153,7348,7385,7448,7476,7508,7554,7573,7620,7662,7673,7693,7717,7748,7770,7772,7827,7931,8038,8081,8100,8101,8162,8236,8311,8409,8422,8450,8451,8465,8480,8501,8578,8599,8644,8712,8741,8784,8821,8873,8899,8902,8932,8991,9012,9014,9040,9066,9075,9204,9247,9351,9356,9361,9427,9427,9474,9482,9525,9539,9570,9588,9596,9597,9610,9619,9676,9687,9693,9709,9715,9761,9767,9775,9814,9839,9884,9969,9978,9999,10053,10055,10120,10198,
//				10225,10266,10336,10355,10363,10368,10375,10380,10400,10417,10435,10509,10525,10609,10610,10676,10692,10762,10791,10801,10818,10876,10877,10963,10972,11007,11089,11111,11121,11140,11185,11192,11265,11293,11309,11357,11415,11428,11526,11526,11544,11549,11611,11636,11637,11653,11700,11794,11807,11818,11826,11855,11856,11888,11911,11960,11973,12039,12046,12079,12103,12111,12165,12244,12271,12276,12307,12325,12337,12376,12421,12431,12439,12483,12547,12567,12578,12609,12610,12623,12631,12701,12731,12750,12756,12764,12790,12830,12902,12931,12997,13015,13151,13154,13156,13252,13282,13298,13399,13457,13464,13473,13546,13551,13566,13582,13604,13605,13612,13729,13734,13814,13885,13903,13914,13914,13939,
//				13944,14043,14055,14077,14088,14090,14109,14185,14198,14220,14265,14314,14333,14363,14375,14376,14427,14430,14502,14504,14516,14555,14657,14663,14679,14752,14764,14804,14831,14836,14894,14951,14968,15005,15069,15091,15091,15096,15163,15185,15239,15244,15255,15315,15326,15350,15406,15436,15444,15472,15538,15628,15654,15669,15699,15729,15742,15757,15767,15784,15798,15827,15851,15869,15887,15887,15909,15918,16074,16078,16173,16212,16257,16301,16332,16335,16344,16397,16401,16408,16425,16461,16479,16486,16487,16517,16531,16532,16570,16579,16598,16634,16650,16682,16708,16726,16747,16758,16758,16813,16832,16890,16908,16926,16943,16948,17037,17048,17078,17081,17097,17150,17188,17214,17235,17244,17247,
//				17256,17334,17431,17450,17509,17512,17514,17521,17525,17539,17566,17595,17653,17665,17667,17703,17730,17765,17768,17773,17788,17827,17852,17884,17893,17909,17959,18016,18072,18103,18115,18150,18164,18245,18251,18316,18341,18383,18536,18548,18557,18608,18651,18653,18674,18732,18798,18819,18883,19012,19021,19087,19120,19130,19202,19206,19217,19230,19296,19310,19340,19384,19459,19460,19471,19537,19544,19552,19626,19763,19785,19859,19880,19892,19900,19910,19920,19963,19984,20017,20099,20105,20137,20139,20175,20244,20359,20381,20389,20415,20530,20561,20649,20739,20779,20785,20789,20836,20877,20894,20955,20983,21005,21055,21148,21164,21165,21172,21181,21272,21303,21318,21343,21353,21356,21464,21529,
//				21577,21595,21606,21621,21672,21699,21731,21732,21765,21780,21915,21928,21946,21970,21977,22023,22047,22048,22099,22168,22207,22231,22251,22263,22274,22296,22301,22334,22450,22464,22534,22687,22730,22734,22808,22823,22890,22937,22975,22983,23010,23056,23089,23105,23120,23146,23159,23250,23274,23281,23310,23333,23340,23394,23427,23435,23473,23497,23536,23563,23570,23624,23626,23664,23704,23725,23734,23739,23749,23797,23814,23901,23905,23988,24028,24053,24195,24225,24273,24293,24321,24347,24412,24417,24442,24447,24475,24533,24603,24734,24762,24818,24819,24847,24858,24867,24881,24882,24895,24920,24945,24946,25010,25012,25020,25070,25076,25088,25107,25108,25157,25159,25189,25195,25244,25264,25357,
//				25395,25429,25472,25490,25515,25575,25615,25622,25629,25731,25752,25803,25828,25850,25876,25979,26030,26041,26067,26083,26111,26124,26163,26218,26232,26278,26293,26347,26348,26397,26412,26413,26420,26474,26485,26511,26556,26595,26614,26682,26698,26752,26793,26870,26896,26919,26933,26946,26996,27017,27022,27065,27110,27131,27136,27161,27165,27183,27359,27403,27408,27426,27434,27581,27603,27620,27645,27688,27702,27716,27731,27742,27759,27768,27809,27818,27837,27851,28200,28225,28253,28308,28353,28383,28407,28440,28457,28473,28494,28546,28575,28584,28586,28595,28620,28674,28675,28675,28831,28835,28938,28963,28992,28994,29068,29123,29156,29194,29204,29313,29381,29404,29434,29460,29487,29527,29556,
//				29681,29688,29690,29691,29757,29760,29788,29802,29894,29898,29959,29989,29991,29994,30016,30024,30058,30084,30089,30089,30123,30143,30167,30167,30210,30233,30236,30312,30324,30400,30486,30524,30555,30556,30602,30609,30619,30630,30666,30671,30676,30780,30784,30788,30818,30861,30863,30890,30912,30952,31242,31258,31273,31304,31394,31403,31408,31411,31461,31470,31472,31477,31505,31562,31593,31597,31699,31711,31762,31778,31803,31812,31906,31912,31944,31945,31946,31955,32005,32016,32042,32052,32130,32153,32183,32194,32197,32205,32220,32367,32368,32401,32424,32498,32508,32521,32546,32601,32615,32632,32699,32716,32736,32751,32751
//		};
//		
//		int[] B={
//				39,99,100,114,149,221,235,238,300,312,381,400,406,457,498,519,521,539,539,573,595,602,610,669,684,695,701,707,781,804,809,817,851,885,896,993,1058,1069,1148,1162,1186,1200,1213,1221,1263,1278,1299,1301,1334,1392,1421,1500,1513,1566,1575,1585,1666,1669,1722,1782,1922,1947,1987,1993,2010,2066,2096,2149,2152,2176,2188,2224,2357,2358,2417,2424,2450,2500,2541,2693,2729,2776,2885,2892,2896,2919,2940,2952,3026,3042,3092,3107,3160,3160,3205,3330,3349,3360,3387,3394,3459,3460,3465,3478,3504,3520,3530,3556,3557,3569,3589,3591,3591,3592,3632,3670,3674,3691,3735,3747,3942,3943,3947,3964,3973,3993,4019,4091,4210,4257,4265,4306,4364,4428,4429,4500,4502,4542,4549,4590,4623,4744,4762,4774,4833,4850,4853,4867,
//				4894,4924,4925,4973,5001,5018,5031,5063,5089,5091,5092,5103,5152,5156,5222,5223,5239,5307,5314,5365,5400,5459,5460,5486,5498,5522,5546,5585,5648,5649,5664,5669,5731,5801,5818,5880,5908,5956,5972,6007,6016,6085,6131,6205,6207,6213,6220,6237,6254,6299,6351,6378,6429,6486,6499,6515,6528,6610,6612,6652,6655,6732,6757,6774,6948,6962,6971,7028,7031,7044,7062,7134,7138,7168,7193,7212,7230,7237,7304,7393,7447,7447,7574,7607,7620,7655,7680,7727,7762,7817,7916,8044,8044,8052,8174,8189,8247,8261,8292,8293,8300,8312,8316,8347,8371,8481,8484,8513,8543,8572,8586,8595,8597,8647,8693,8750,8764,
//				8770,8772,8797,8833,8857,8875,8887,8896,8925,8934,8952,8972,8998,9050,9092,9117,9179,9203,9229,9248,9308,9346,9358,9367,9381,9388,9403,9407,9444,9448,9512,9524,9540,9679,9744,9769,9769,9833,9842,9858,9977,10083,10096,10119,10126,10132,10146,10187,10236,10279,10291,10314,10317,10325,10358,10430,10503,10523,10549,10562,10599,10605,10695,10714,10722,10798,10800,10811,10838,10858,10861,10882,11011,11021,11038,11052,11084,11100,11138,11161,11180,11186,11219,11246,11250,11271,11344,11421,11474,11481,11538,11571,11574,11642,11654,11681,11738,11756,11788,11803,11826,11894,11912,11935,11969,11978,12014,12030,12033,12037,12061,12085,12106,12107,12141,12201,12206,12245,12300,12384,12390,12420,12443,12448,12455,12476,12564,12575,12578,12606,12684,12731,12733,12751,12777,12795,12820,12859,12908,13003,13045,13083,13149,
//				13149,13171,13240,13304,13307,13372,13401,13423,13449,13484,13505,13540,13556,13638,13698,13726,13729,13737,13783,13786,13813,13866,13893,13954,13976,13983,14042,14065,14107,14112,14151,14210,14255,14292,14297,14319,14329,14346,14415,14427,14430,14435,14445,14609,14610,14646,14707,14737,14865,14917,15081,15123,15137,15152,15170,15180,15209,15216,15238,15291,15305,15309,15330,15336,15348,15369,15416,15481,15493,15525,15640,15737,15750,15787,15793,15799,15826,15869,
//				15980,16031,16044,16090,16193,16321,16331,16368,16404,16417,16442,16455,16573,16591,16593,16656,16734,16752,16765,16796,16997,17030,17114,17160,17162,17172,17173,17181,17225,17226,17239,17239,17243,17286,17290,17357,17427,17474,17499,17512,17517,17567,17726,17731,17781,17834,17874,17940,17944,17949,17962,17979,17979,18036,18042,18054,18089,18103,18126,18137,18145,18176,18206,18286,18369,18377,18569,18571,18591,18611,18624,18666,18672,18698,18707,18779,18790,18937,
//				18956,18967,18968,18970,18991,18992,19003,19010,19076,19092,19095,19113,19155,19216,19216,19232,19247,19259,19262,19338,19358,19362,19397,19425,19459,19611,19631,19641,19665,19743,19765,19775,19798,19817,19827,19847,19850,19951,19980,20033,20041,20077,20097,20107,20141,20190,20211,20242,20328,20393,20414,20467,20479,20501,20525,20545,20548,20614,20660,20752,20874,20925,20957,20966,21028,21067,21108,21146,21153,21210,21273,21298,21331,21334,21349,21357,21517,21557,
//				21588,21614,21623,21671,21681,21782,21836,21866,21968,21969,22000,22002,22020,22059,22090,22162,22259,22290,22314,22370,22381,22391,22562,22582,22615,22705,22708,22757,22771,22785,22825,22881,22885,22901,22942,22969,22975,22988,23028,23039,23064,23072,23115,23156,23175,23182,23206,23210,23277,23315,23342,23401,23408,23475,23477,23501,23517,23579,23615,23644,23691,23702,23727,23729,23733,23808,23823,23831,23853,23933,24002,24010,24019,24045,24073,24218,24238,24244,24280,24297,24360,24362,24389,24400,24461,24495,24515,24532,24554,24602,24615,24654,24698,24739,24758,24835,24841,24916,25021,25061,25101,25102,25153,25153,25287,25292,25296,25311,25316,25316,25319,25327,25395,25432,25454,25472,25557,
//				25621,25622,25631,25649,25689,25724,25741,25742,25796,25839,25865,25866,25871,25874,25911,25916,25925,25941,25958,25981,26092,26098,26113,26160,26173,26315,26318,26355,26385,26390,26417,26429,26466,26488,26535,26542,26618,26674,26724,26773,26785,26807,26837,26840,26861,26891,26969,26971,27009,27027,27063,27196,27220,27251,27289,27308,27326,27331,27340,27356,27428,27428,27499,27524,27596,27700,27708,27856,27873,27923,27947,27990,27992,28008,28072,28081,28112,28150,
//				28220,28253,28286,28316,28323,28326,28344,28366,28421,28436,28441,28471,28486,28585,28592,28684,28690,28698,28704,28731,28750,28761,28782,28851,28931,28935,28945,28953,28974,29080,29090,29107,29196,29200,29207,29224,29234,29253,29258,29303,29322,29325,29334,29348,29382,29396,29409,29410,29450,29491,29504,29522,29555,29641,29644,29647,29653,29676,29690,29834,29885,29896,29909,29963,30035,30064,30104,30175,30195,30227,30232,30260,30268,30294,30332,30340,30348,30393,30412,30449,30465,30519,30571,30580,30601,30627,30678,30713,30726,30745,30748,30757,30806,30808,30813,30822,30916,30924,30930,30997,31001,31069,31132,31181,31190,31202,31231,31249,31256,31339,31348,31365,31384,31436,31460,31550,31574,31596,31685,31698,31710,31730,31736,31761,31799,31857,31891,31916,31950,31962,31969,31988,32039,32059,32067,32159,32162,32164,32188,32196,32268,32289,32315,32327,32355,32361,32374,32485,32489,32539,32569,32577,32602,32613,32631,32645,32658,32667,32674,32692,32697,32700,32737				
//		};
		
		
//		int[] A={
//				29,126,242,263,315,349,390,521,530,539,578,690,691,704,770,787,793,826,858,910,1002,1048,1060,1076,1199,1247,1265,1282,1306,1346,1393,1407,1414,1427,1433,1449,1464,1474,1512,1589,1663,1677,1692,1700,1773,1789,1794,1806,1822,1829,1853,1869,1881,1887,1963,2142,2146,2147,2179,2244,2256,2271,2300,2360,2388,2423,2564,2609,2620,2632,2670,2714,2721,2761,2778,2834,2846,2858,2867,2893,2922,2958,3020,3027,3032,3201,3233,3297,3420,3440,3451,3510,3532,3565,3589,3599,3631,3633,3686,3707,3773,3805,3829,3843,3852,3891,3980,4013,4063,4064,4154,4194,4207,4254,4327,4380,4478,4498,4518,4537,4555,4560,4569,4696,4765,4775,4776,4787,4788,4797,4813,4829,4857,4872,4881,4909,4934,4937,4952,4971,4978,5050,5090,5262,5303,5386,5390,5409,5420,5465,5472,5482,5498,5577,5616,5674,5840,5877,5887,5940,6121,6172,6174,6189,6235,6330,6374,6450,
//				6480,6497,6498,6528,6612,6633,6639,6659,6675,6697,6738,6754,6804,6809,6873,6887,7056,7074,7133,7134,7143,7157,7162,7163,7185,7238,7352,7354,7388,7411,7430,7487,7527,7573,7575,7639,7661,7681,7696,7742,7745,7763,7776,7812,7816,7818,7865,7898,7912,7954,7959,8001,8029,8096,8124,8132,8167,8201,8227,8351,8365,8369,8394,8401,8408,8410,8411,8428,8451,8473,8478,8661,8710,8746,8758,8779,8823,8828,8828,8977,8982,9005,9069,9111,9144,9265,9294,9303,9327,9344,9355,9446,9466,9508,9510,9525,9634,9666,9699,9734,9786,9887,9962,9974,10006,10033,10048,10137,10158,10216,10269,10344,10441,10536,10544,10552,10572,10628,10654,10662,10684,10697,10844,10853,10861,10872,10951,10966,11008,11157,11183,11217,11229,11259,11299,11344,11479,11479,11518,11532,11553,11554,11572,11610,11656,11734,11760,11762,11777,11827,11843,11843,11849,11872,11927,12046,12164,12179,12204,12208,12212,12238,12267,12314,12331,12352,12353,12355,12416,12481,12490,12505,12512,
//				12580,12650,12659,12671,12728,12730,12777,12856,12892,12914,13021,13037,13062,13127,13152,13160,13165,13166,13175,13189,13224,13307,13346,13393,13523,13541,13588,13665,13720,13728,13773,13817,13817,13831,13839,13845,13907,13921,13976,14003,14023,14025,14077,14240,14355,14370,14406,14491,14535,14557,14563,14578,14584,14591,14651,14662,14664,14681,14682,14724,14730,14746,14808,14817,14842,14874,14908,14964,14996,15023,15056,15066,15124,15145,15183,15228,15385,15403,15498,15529,15541,15552,15679,15738,15746,15759,15778,15781,15818,15832,15836,15901,15904,15955,15993,16056,16075,16077,16101,16113,16115,16134,16253,16274,16275,16281,16291,16306,16334,16366,16399,16455,16496,16522,16532,16551,16601,16607,16611,16618,16645,16655,16815,16816,16825,16857,16892,16906,16933,16948,17000,17008,17071,17092,17147,17250,17256,17268,17290,17383,17393,17394,17452,17549,17558,17572,17602,17629,17645,17663,17692,17696,17744,17766,17777,17819,
//				17871,17915,18070,18086,18124,18131,18169,18228,18281,18298,18339,18370,18378,18387,18402,18414,18415,18420,18463,18469,18473,18489,18527,18540,18566,18586,18586,18655,18741,18744,18796,18833,18849,18895,18904,18945,18969,18973,18999,19001,19073,19074,19157,19177,19196,19232,19270,19360,19461,19559,19572,19575,19593,19701,19761,19841,19859,19886,19898,19918,19923,19960,19986,20043,20087,20105,20175,20203,20214,20272,20283,20284,20294,20327,20390,20407,20407,20420,20433,20458,20464,20466,20549,20704,20715,20751,20842,20898,20905,21028,21052,21069,21075,21080,21124,21166,21172,21178,21183,21275,21296,21325,21338,21342,21400,21452,21482,21494,21536,21613,21690,21708,21718,21720,21793,21831,21876,
//				21903,21911,21915,21932,21971,22018,22049,22058,22072,22097,22211,22230,22233,22265,22306,22329,22338,22363,22397,22421,22476,22490,22550,22558,22581,22607,22750,22758,22779,22843,22877,22935,22950,22996,23019,23046,23122,23143,23166,23210,23263,23344,23348,23394,23426,23467,23481,23492,23584,23594,23597,23606,23622,23653,23700,23780,23786,23809,23896,23904,23917,23937,24054,24077,24115,24134,24142,24218,24266,24285,24295,24313,24315,24319,24355,24432,24444,24470,24482,24485,24539,24580,24696,24724,24751,24751,24787,24841,24843,24856,24876,24889,24916,24933,25049,25062,25087,25264,25375,25386,25411,25446,25450,25453,25457,25466,25521,25529,25560,25631,25654,25707,25721,25724,25762,25814,25828,
//				25843,25845,25857,25859,25865,25892,25954,25965,26034,26062,26069,26077,26090,26188,26244,26277,26294,26296,26299,26312,26321,26349,26381,26431,26472,26552,26574,26591,26628,26639,26642,26664,26704,26711,26718,26743,26843,26898,26950,26981,27018,27105,27110,27123,27124,27147,27246,27260,27297,27350,27354,27398,27408,27472,27503,27530,27572,27614,27662,27682,27729,27733,27802,27804,27812,27833,27837,27913,27938,27981,28016,28028,28043,28145,28164,28207,28279,28303,28305,28337,28375,28397,28471,28549,28563,28581,28600,28660,28698,28806,28872,28915,28930,29040,29061,29064,29077,29180,29229,29232,29252,29338,29354,29354,29371,29371,29379,29393,29400,29430,29444,29514,29516,29523,29539,29587,29588,
//				29654,29714,29780,29788,29879,29882,29916,29944,29971,30008,30013,30037,30074,30089,30118,30168,30194,30237,30251,30272,30278,30308,30340,30380,30419,30419,30439,30494,30495,30507,30550,30582,30665,30673,30703,30757,30786,30804,30823,30897,30966,30967,31004,31043,31054,31055,31083,31086,31094,31108,31239,31261,31303,31327,31350,31366,31407,31434,31479,31497,31560,31634,31681,31684,31684,31762,31849,31890,31909,32157,32163,32187,32231,32249,32267,32269,32296,32381,32452,32502,32510,32582,32604,32619,32660,32694,32737
//		};
//		int[] B={
//				25,84,86,134,143,144,251,259,259,386,428,460,574,585,880,882,958,971,1111,1130,1209,1216,1243,1338,1342,1427,1474,1554,1576,1614,1718,1736,1793,1814,1877,1894,1973,1985,2036,2161,2163,2263,2310,2386,2431,2615,2680,2777,2807,2858,3070,3102,3162,3177,3362,3420,3470,3473,3641,3711,3748,3811,3852,3852,3906,3965,4080,4103,4153,4294,4325,4382,4392,4468,4535,4624,4672,4715,4764,4807,4848,4887,5008,5144,5184,5215,5284,5314,5379,5478,5540,5550,5565,5778,5810,5936,5968,6092,6110,6120,6164,6204,6283,6288,6294,6303,6376,6460,6497,6521,6552,6636,6714,6715,6886,7001,7028,7053,7099,7271,7287,7366,7464,7466,7656,7670,7694,7694,7810,7813,7829,7835,7904,7913,8127,8138,8177,8206,8276,8286,8434,8473,8572,8594,8635,8637,8678,8735,8794,8821,8871,8882,8915,8941,8974,9070,9091,9097,9158,9165,9198,9205,9288,9356,9391,9482,9578,9592,
//				9596,9626,9718,9736,9772,9813,9847,9962,9975,10038,10044,10093,10104,10120,10158,10213,10292,10618,10636,10757,10783,10815,10839,10873,10956,11142,11179,11335,11476,11517,11549,11555,11613,11650,11692,11734,11785,11789,11844,11874,11931,12009,12009,12031,12044,12198,12198,12252,12313,12434,12472,12514,12568,12570,12582,12628,12661,12675,12705,12763,12766,12783,12786,12836,12913,12953,12979,13022,13100,13100,13131,13180,13202,13264,13279,13323,13449,13461,13560,13616,13684,13700,13747,13753,13757,13759,13853,13887,13909,13931,14103,14119,14146,14254,14332,14413,14461,14507,14550,14577,14696,14696,14862,14915,14938,15238,15294,15386,15407,15518,15526,15531,15540,15559,15676,15858,16094,16137,16169,16196,16240,16326,16506,16512,16513,16552,16641,16648,16653,16703,16707,16762,16823,16888,17012,17015,17114,17207,
//				17209,17219,17227,17239,17257,17350,17461,17632,17689,17706,17780,17838,17908,17939,17962,17963,17983,18373,18516,18531,18610,18613,18797,18832,18852,18897,18961,19001,19029,19098,19131,19239,19526,19575,19598,19602,19682,19717,19764,19942,19969,19975,20003,20004,20004,20008,20057,20060,20102,20113,20141,20182,20211,20255,20283,20359,20461,20514,20518,20657,20673,20742,20796,20833,20865,20891,20898,20949,21008,21039,21104,21313,21345,21387,21462,21471,21564,21765,21766,21812,21835,21860,21885,21903,21906,21916,22003,22025,22149,22178,22201,22378,22380,22384,22388,22424,22577,22599,22630,22635,22639,22685,22721,22748,22787,22847,22854,22910,22958,23005,23227,23250,23315,23317,23326,23437,23454,
//				23671,23674,23810,23851,23912,23949,24006,24089,24107,24210,24253,24319,24364,24411,24457,24462,24561,24665,24699,24766,24881,24894,24998,25015,25059,25189,25200,25225,25283,25342,25420,25506,25735,25768,25814,25858,26057,26082,26100,26123,26126,26337,26415,26478,26500,26634,26693,26776,26784,26836,26880,26939,26987,27243,27605,27638,27655,27690,27709,27776,27863,28043,28137,28196,28233,28288,28307,28314,28367,28367,28413,28450,28463,28522,28602,28652,28656,28693,28723,28736,28858,28916,28982,29095,29153,29298,29345,29351,29434,29526,29532,29674,29689,29841,29882,29933,29933,29973,29973,30100,30103,30153,30170,30256,30381,30395,30440,30495,30561,30614,30660,30661,30663,30681,30766,30860,30875,30986,31024,31104,31108,31179,31186,31224,31250,31310,31386,31566,31602,31660,31701,31712,31721,31762,31807,31842,31931,31966,31991,32002,32160,32175,32194,32282,32386,32478,32502,32516
//		};
		
	
		
		
		
		
		double res = findMedianSortedArrays(A,B);
		
		System.out.println(" res is : "+res);
	}
    
    /***
     * devide into even two part and conquer. O(logn)
     * 
     * remove half each time recursively call the aux function.
     * 
     * 
     */ 
    public double findMedianSortedArrays(int A[], int B[]) {
        
        
        int countA = A.length;
        int countB = B.length;
        
        if(countA>countB){
        	return findMedianSortedArrays(B,A);
        }
        
        int total = countA+countB;
        int rem = total%2;
        int resIndex = total/2;
        
        // index from 1, not from 0.
        if(rem ==1){
            // good.... easier case first.
            //index we need is just resIndex;
            resIndex = (total+1)/2;
            return findMedianSortedArraysAux(A,0,A.length-1,B,0,B.length-1,resIndex,false);
        }else{
            // shit, shall return /2 of two numbers, index of 
            // resIndex and resIndex+1;
            return findMedianSortedArraysAux(A,0,A.length-1,B,0,B.length-1,resIndex,true);
        }
    }
    
    int index =0;
    
    
    
    /**
     * the truth of this function is find the 'resIndex'th number of two lists.
     * 
     * this function uses no addtional space for this median searching.
     * or we can just merge two arrays and count( we can just count without using extra space to save the content)
     * 
     */
    private double findMedianSortedArraysAux(int A[],int as,int ae,int B[],int bs,int be,int resIndex,boolean needDual){
    	index++;
    	System.out.println(""+index+" findMedianSortedArraysAux ,  "+as+"~"+ae+"     ,  "+bs+"~"+be+"     index: "+resIndex+"  dual: "+needDual);
    	System.out.println(""+index+" findMedianSortedArraysAux ,  "+A[as]+"~"+A[ae]+"     ,  "+B[bs]+"~"+B[be]);
        int countA = ae-as+1;
        int countB = be-bs+1;
        int count = countA+countB;
//        
//        if(index>1000){
//        	return 0;
//        }

        // keep size A < size B
        if(countA>countB){
        	return findMedianSortedArraysAux(B,bs,be,A,as,ae,resIndex,needDual);
        }
        
        if(countA==0){
        	// cool, get it from array B , this is over.
        	int target = bs+resIndex-1; //resIndex count from 1,
        	return getResultFromArray(B,target,needDual);
        }
        
        if(countA<3&&countB>5){
        	System.out.println(" countA<3 : "+countA+"  countB: "+countB);
        	// in this case,  as countA = 1 or 2,  we may can't remove any number from A by the devide and conquer strategy.
        	// cause if we cut A into  {left, cutPos, right} , left part or right part will be of size 0. if we throw it away, we actually throw nothing, so no help 
        	
        	// but think about this, what we want is THE resIndex one/two from A/B , as A don't have much element
        	// the result is either in A, or it's the [resIndex-3, resIndex] in the array B.
        	int leftCutCount = resIndex-3>-1?resIndex-3:0;
//        	System.out.println(" left cut: "+leftCutCount);
        	bs+= leftCutCount;
        	
        	if(be>bs+3){
        		be = bs+3;
        	}
        	resIndex-=leftCutCount;
        	// next time , A,and B, both don't have much element, will fell into the final merge sort.
        	return findMedianSortedArraysAux(A,as,ae,B,bs,be,resIndex,needDual);
        }
        
        
        if(count<10){
            return findMedianSortedArrayMergeSort(A,as,ae,B,bs,be,resIndex,needDual);
        }
        
        int halfA = countA/2;
        int halfB = countB/2;
        int cutPosA = as+halfA;
        int cutPosB = bs+halfB;
        System.out.println(" cutA   ["+cutPosA+"]: "+A[cutPosA]+"    , cutB  ["+cutPosB+"]: "+B[cutPosB]);
        
        // [---------cutA---------]
        // [=========cutB=========]
        
        
        // if A and B are really different of size,  like   A.length = 10, B.length = 1000,  and the index we need is 500;
        
        //             we got cutA<cutB , so   left half(5) <cutA (5)  < (500) cutB < right half(500) , so we can give up left half of A, and right half of B
        // but for the index, now, the index is fun. it's 495 from cutA-rightA,   leftB-cutB.
        
        
        // when we got cutA, cutB, after compare them,
        // we can get two conclusion:   
        // 1:  {left-bigger, left-smaller, smaller}  < bigger                                
        // 2:  smaller< {smaller-right, bigger-right, bigger}
        
        // {s-l, s , sr* }  { b-l*,b,b-r} value with stars mean that we don't know the condition/count that how many of sr* are bigger than b,  how many of b-l* are smaller than a. 
        
        //so we got,   { [s-l, b-l-1*] < s < [s-r-1*, b-l-2*] < b <[s-r-2*, b-r] , number with * are non-nagetive numbers but we don't know. 
        // but when cutA == cutB ,    [ left<cutA, left<cutB ] [cutA,cutB] [right>cutA, right>cutB]
        
        // for the general case, what shall we do?
        // case1,  resIndex < count(sl) ; that's cool, we can throw away everything to right of s ( keep s in case it's a dual) ,  res in: { sl,bl}
        // case2,  resIndex < count(sl+bl+s+b) ; in this case, we can throw away everything to right of b (keep b itself, just in case it's a dual) ; res in :{sl,s,sr,bl,b} ; we only throw away br..
        // case3,  resIndex > count(sl+s+bl+b) , then it's at least>s , we can ignore numbers to left of s,   res in { s,sr,bl,b,br} , only throw away sl...
        // case4,  resIndex > count(sl,sr,s,b,bl) , throw away s,b,sl,bl,   it's in {br,sr}      
        
        // for A==B,  A[cutPosA]>B[cutPosB]
        // case1,  resIndex< count(sl,bl) ,   it's in {sl,bl}
        // case 2, resIndex> count(sl,bl),  it's in {s,b,sr,br} ,   cut half each time.
        
        // also add one more in case it's a dual and the target is just separated to two arrays.
//        System.out.println(" cutA : "+cutPosA+"   cutB: "+cutPosB);
//        System.out.println(" cutA v: "+A[cutPosA]+"   cutB v: "+B[cutPosB]);
        // new astart/end, bstart/end 
        int nas = as;
        int nae = ae;
        int nbs = bs;
        int nbe = be;
        
        if(A[cutPosA]==B[cutPosB]){
        	int leftCount=0;
        	int rightCount =0;
        	leftCount = cutPosB-bs+cutPosA-as;
        	rightCount = be-cutPosB+ae-cutPosA;
        	
        	if(resIndex<=leftCount){
        		// res in the left, even we want two numbers, add cutposA will be enough for the return.
        		nae = cutPosA;
        		nbe = cutPosB;
        		// right part from the part will not be considered now.
        	}else{
        		//resIndex>leftCount;
        		nas = cutPosA;
        		nbs = cutPosB;
        		resIndex -= leftCount; // left part are throw away.
        	}
        	return findMedianSortedArraysAux(A,nas,nae,B,nbs,nbe,resIndex,needDual);		
        }
        
        
        int sl,sr,bl,br; //smaller and bigger.
        if(A[cutPosA]>B[cutPosB]){
        	// A is bigger and B is smaller.
        	sl = cutPosB-bs;
        	bl = cutPosA-as;
        	sr = be-cutPosB;
        	br = ae-cutPosA;
        }else{
        	// A<B , A is smaller and B is bigger
        	sl = cutPosA-as;
        	sr = ae-cutPosA;
        	bl = cutPosB-bs;
        	br = be-cutPosB;
        }
        
//        { [s-l, b-l-1*] < s < [s-r-1*, b-l-2*] < b <[s-r-2*, b-r] 
     // case1,  resIndex < count(sl) ; that's cool, we can throw away everything to right of s ( keep s in case it's a dual) ,  res in: { sl,bl}
        // case2,  resIndex < count(sl+bl+s+b) ; in this case, we can throw away everything to right of b (keep b itself, just in case it's a dual) ; res in :{sl,s,sr,bl,b} ; we only throw away br..
        // case3,  resIndex > count(sl+s+bl+b) , then it's at least>s , we can ignore numbers to left of s,   res in { s,sr,bl,b,br} , only throw away sl...
        // case4,  resIndex > count(sl,sr,s,b,bl) , throw away s,b,sl,bl,   it's in {br,sr}      
        
        System.out.println(" sl, sr : "+sl+"  "+sr+"          bl, br: "+bl+"   "+br+"       resIndex; "+resIndex);
        
        if(resIndex<sl){  // in{sl,bl}
        	nae = cutPosA;
        	nbe = cutPosB;
        	//don't need to change resIndex;
        }else if(resIndex<=sl+bl){ //  will not be right of bigger.  but we have to keep bigger itself and right-smaller,
        	//!!!!!!!!!! when resIndex==sl+bl, we have to get last element of sl and bl.
        	if(A[cutPosA]>B[cutPosB]){
        		nae = cutPosA;
        	}else{
        		nbe = cutPosB;
        	}
        }else if(resIndex<sl+bl+sr+2){
        	//  at least > s , throw away sl, 
        	if(A[cutPosA]>B[cutPosB]){
        		nbs = cutPosB;
        	}else{
        		nas = cutPosA;
        	}
        	resIndex-= sl;
        }else{
        	// last case, it fell's in the right most part.
        	nas = cutPosA;
        	nbs = cutPosB;
        	resIndex-=(sl+bl); 
        }
        
        return findMedianSortedArraysAux(A,nas,nae,B,nbs,nbe,resIndex,needDual);
        
    }
    
    /**
     * 
     * just merge two arrays, and get the median by  count the numbers in the merged array.
     * only works under condition that number in A and number in B are very small, 
     * not time consuming to merge it.
     * 
     * //index count from 1, not 0;
     */ 
    private double findMedianSortedArrayMergeSort(int A[],int as,int ae,int B[],int bs,int be,int resIndex,boolean needDual){
    	System.out.println("findMedianSortedArrayMergeSort ,  "+as+"~"+ae+"     ,  "+bs+"~"+be+"     index: "+resIndex+"         A:"+A.length+"  B:"+B.length);
//    	
//    	for(int i=as;i<=ae;++i){
//    		System.out.println("  i "+i+"   : "+A[i]);
//    	}
//    	for(int i=bs;i<=be;++i){
//    		System.out.println("  i "+i+"   : "+B[i]);
//    	}
    	
        int needed = resIndex;
        
        if(needDual){
            needed++;
        }
        
//        System.out.println(" needed: "+needed);
        int[] res = new int[needed];
        
        int i=0;
        int curA = as;
        int curB = bs;
        
//        System.out.println(" curA, curB: "+curA+" ~ "+curB+"      i:"+i);
        
        while(i<needed){
//            System.out.println(" i : "+i+"   curA "+curA+"    curB: "+curB);
            if(curA<0||curB<0){
//            	System.out.println("-- in --");
                if(curA<0||curA>ae){
                    //noting in array A now, get from B.
                    res[i] = B[curB];
                    curB++;
                }else if(curB<0||curB>be){
//                	System.out.println(" in , curA: "+curA);
                    //nothing in array B now, get from A.
                    res[i] = A[curA];
                    curA++;
                }
            }else{
                if(A[curA]<B[curB]){
                    //pick from A.
                    res[i] = A[curA];
                    curA++;
                }else{
                    // same or smaller is from B.
                    res[i] = B[curB];
                    curB++;
                }
            }
            
            
            if(curA>ae){
//            	System.out.println(" A now -1  : "+curA);
                //exceed array A ,
                curA = -1; // -1 to say it's empty
            }
            
            if(curB>be){
//            	System.out.println(" B now -1  : "+curB);
                curB = -1;
            }
//            System.out.println("  res i : "+res[i]);
            
            i++;
        }
        
        // ok combined array done now, let's get median
        return getResultFromArray(res,resIndex-1,needDual);
    }
    
    private double getResultFromArray(int[] al,int index,boolean needDual){
//    	System.out.println(" getResultFromArray,        : "+al[index]);
    	if(needDual){
            int n1 = al[index];
            int n2 = al[index+1];
            double sum = n1+n2;
            return (double)sum/2;
        }else{
            return al[index];
        }
    }
    
}